/**
 * @fileoverview Firestore Security Rules for MangaTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and manga libraries.
 * Each user has full control over their own profile and library data.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information.
 * - `/users/{userId}/library/{mangaId}`: Stores individual manga entries in a user's library.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile and manga library data.
 * - Listing other user's libraries is disallowed.
 * - Schema validation is relaxed in this prototyping phase, focusing on authorization.
 * - Denormalization is not required as the data structure inherently supports path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get) User with matching ID can read their profile.
     * @allow (update) User with matching ID can update their profile.
     * @allow (delete) User with matching ID can delete their profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for manga library entries within a user's profile.
     * @path /users/{userId}/library/{mangaId}
     * @allow (create) User with matching ID can create a manga entry in their library.
     * @allow (get) User with matching ID can read a manga entry in their library.
     * @allow (list) User with matching ID can list manga entries in their library.
     * @allow (update) User with matching ID can update a manga entry in their library.
     * @allow (delete) User with matching ID can delete a manga entry in their library.
     * @deny (create) User cannot create a manga entry in another user's library.
     * @deny (get) User cannot read a manga entry from another user's library.
     * @deny (list) User cannot list manga entries from another user's library.
     * @deny (update) User cannot update a manga entry in another user's library.
     * @deny (delete) User cannot delete a manga entry from another user's library.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/library/{mangaId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}