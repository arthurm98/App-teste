/**
 * @fileoverview Firestore Security Rules for MangaTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and manga libraries.
 * Each user has full control over their own data, and no other user can access it.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information.  The `userId` MUST match the Firebase Auth UID.
 * - `/users/{userId}/library/{mangaId}`: Stores manga entries for a user's personal library.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data validation is minimized for rapid prototyping.  Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 *  - The `userId` is part of the path for both user profiles and library entries. This ensures that ownership can be verified without additional `get()` calls.
 *
 * Structural Segregation:
 *  - Private user data (library) is stored in a subcollection of the user's profile. This allows for clear separation of concerns and simpler rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces authentication for all requests.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires all requests to be authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the user document and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the request is made by the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }

    match /users/{userId} {
      /**
       * @description Controls access to user profile documents.
       * @path /users/{userId}
       * @allow (create) User with UID "user123" can create their own profile document with ID "user123".
       * @allow (get) User with UID "user123" can read their own profile document.
       * @allow (update) User with UID "user123" can update their own profile document.
       * @allow (delete) User with UID "user123" can delete their own profile document.
       * @deny (create) User with UID "user456" cannot create a profile document with ID "user123".
       * @deny (get) User with UID "user456" cannot read user document with ID "user123".
       * @deny (update) User with UID "user456" cannot update user document with ID "user123".
       * @deny (delete) User with UID "user456" cannot delete user document with ID "user123".
       * @principle Enforces document ownership for all operations.
       */
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/library/{mangaId} {
      /**
       * @description Controls access to manga documents within a user's library.
       * @path /users/{userId}/library/{mangaId}
       * @allow (create) User with UID "user123" can create a manga document in their own library.
       * @allow (get) User with UID "user123" can read a manga document from their own library.
       * @allow (update) User with UID "user123" can update a manga document in their own library.
       * @allow (delete) User with UID "user123" can delete a manga document from their own library.
       * @deny (create) User with UID "user456" cannot create a manga document in the library of user "user123".
       * @deny (get) User with UID "user456" cannot read a manga document from the library of user "user123".
       * @deny (update) User with UID "user456" cannot update a manga document in the library of user "user123".
       * @deny (delete) User with UID "user456" cannot delete a manga document from the library of user "user123".
       * @principle Enforces document ownership for all operations within the library subcollection.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}