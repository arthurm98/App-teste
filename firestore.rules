/**
 * @fileoverview Firestore Security Rules for MangaTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and library entries.
 * Public read access is granted to manga and genre data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /mangas/{mangaId}: Stores manga information.
 * - /users/{userId}/libraryEntries/{libraryEntryId}: Stores user-specific library entries.
 * - /genres/{genreId}: Stores manga genres.
 * - /mangaGenres/{mangaGenreId}: Stores the relationships between mangas and genres.
 *
 * Key Security Decisions:
 * - User profiles and library entries are only accessible to the owning user.
 * - Listing of user documents is disallowed.
 * - Public read access is allowed for mangas and genres.
 * - The mangaGenres collection is open for both reads and writes.
 *
 * Denormalization for Authorization:
 * - Library entries are stored under /users/{userId} to allow for simple path-based ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access profile 'user123'.
     * @deny (list) - No user can list all user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure manga information. Allows public read access but restricts writes.
     * @path /mangas/{mangaId}
     * @allow (get, list) - Any user, authenticated or not, can read manga information.
     * @deny (create, update, delete) - No user can create, update, or delete manga information without specific authorization (e.g., admin role, which is not defined in the IR).
     * @principle Allows public read access with restricted writes.
     */
    match /mangas/{mangaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure library entries. Only the authenticated user can manage their own library entries.
     * @path /users/{userId}/libraryEntries/{libraryEntryId}
     * @allow (create) - User with ID 'user123' can create a library entry under their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their library entry if authenticated as 'user123'.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access library entries under user 'user123'.
     * @deny (list) - No user can list all user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/libraryEntries/{libraryEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure genre information. Allows public read access but restricts writes.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user, authenticated or not, can read genre information.
     * @deny (create, update, delete) - No user can create, update, or delete genre information without specific authorization (e.g., admin role, which is not defined in the IR).
     * @principle Allows public read access with restricted writes.
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure mangaGenre relationships. Allows public read access but restricts writes.
     * @path /mangaGenres/{mangaGenreId}
     * @allow (get, list) - Any user, authenticated or not, can read mangaGenre information.
     * @deny (create, update, delete) - No user can create, update, or delete mangaGenre information without specific authorization (e.g., admin role, which is not defined in the IR).
     * @principle Allows public read access with restricted writes.
     */
    match /mangaGenres/{mangaGenreId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}