/**
 * @file Firestore Security Rules for MangaTrack.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Users can only
 *  access their own profile data and manga library entries. All data is nested under
 *  /users/{userId}, ensuring clear ownership.
 *
 * @data_structure
 *  - /users/{userId}: Stores public user profile information. The document ID is
 *    the same as the Firebase Auth UID.
 *  - /users/{userId}/library/{mangaId}: Stores the manga entries for a user's personal
 *    library. Path-based ownership ensures users can only access their own library.
 *
 * @key_security_decisions
 *  - Users can only list manga entries in their own libraries.
 *  - Users cannot create, update, or delete other user's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile information based on user ID.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get) Any user can get another user's public profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (create) User attempts to create a profile with a different ID.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) ;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to manga library entries based on user ID.
     * @path /users/{userId}/library/{mangaId}
     * @allow (create) User with matching ID can create a library entry.
     * @allow (get) User with matching ID can get their own library entry.
     * @allow (list) User with matching ID can list their own library entries.
     * @allow (update) User with matching ID can update their own library entry.
     * @allow (delete) User with matching ID can delete their own library entry.
     * @deny (create) User attempts to create a library entry for a different user.
     * @deny (get) User attempts to get a library entry for a different user.
     * @deny (list) User attempts to list library entries for a different user.
     * @deny (update) User attempts to update a library entry for a different user.
     * @deny (delete) User attempts to delete a library entry for a different user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/library/{mangaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}